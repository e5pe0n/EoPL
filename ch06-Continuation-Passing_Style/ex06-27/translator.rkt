#lang eopl

(require "lang.rkt")
(require "utils.rkt")
(require "errors.rkt")

(provide (all-defined-out))

; InpExp -> TfExp
(define cps-of-program
  (lambda (pgm)
    (cases program pgm
      (a-program (exp)
        (a-cps-program
          (cps-of-exps (list exp)
            (lambda (new-args)
              (simple-exp->exp (car new-args))
            )
          )
        )
      )
    )
  )
)

; Listof(InpExp) * (Listof(InpExp) -> TfExp) -> TfExp
(define cps-of-exps
  (lambda (exps builder)
    ; Listof(InpExp) -> TfExp
    (let cps-of-rest ([exps exps])
      (let
        ([pos (list-index (lambda (exp) (not (inp-exp-simple? exp))) exps)])
        (if (not pos)
          (builder (map cps-of-simple-exp exps))
          (let ([var (fresh-identifier 'var)])
            (cps-of-exp
              (list-ref exps pos)
              (cps-proc-exp (list var)
                (cps-of-rest
                  (list-set exps pos (var-exp var))
                )
              )
            )
          )
        )
      )
    )
  )
)

; InpExp -> Bool
(define inp-exp-simple?
  (lambda (exp)
    (cases expression exp
      (const-exp (num) #t)
      (var-exp (var) #t)
      (diff-exp (exp1 exp2)
        (and (inp-exp-simple? exp1) (inp-exp-simple? exp2))
      )
      (mul-exp (exp1 exp2)
        (and (inp-exp-simple? exp1) (inp-exp-simple? exp2))
      )
      (add1-exp (exp1) (inp-exp-simple? exp1))
      (sum-exp (exps) (every? inp-exp-simple? exps))
      (zero?-exp (exp1) (inp-exp-simple? exp1))
      (number?-exp (exp1) (inp-exp-simple? exp1))
      (equal?-exp (exp1 exp2)
        (and (inp-exp-simple? exp1) (inp-exp-simple? exp2))
      )
      (less?-exp (exp1 exp2)
        (and (inp-exp-simple? exp1) (inp-exp-simple? exp2))
      )
      (greater?-exp (exp1 exp2)
        (and (inp-exp-simple? exp1) (inp-exp-simple? exp2))
      )
      (null?-exp (exp1) (inp-exp-simple? exp1))
      (proc-exp (vars exp1) #t)
      (emptylist-exp () #t)
      (list-exp (exps) (every? inp-exp-simple? exps))
      (car-exp (exp1) (inp-exp-simple? exp1))
      (cdr-exp (exp1) (inp-exp-simple? exp1))
      (cons-exp (exp1 exp2)
        (and (inp-exp-simple? exp1) (inp-exp-simple? exp2))
      )
      (else #f)
    )
  )
)

; InpExp * SimpleExp -> TfExp
(define cps-of-exp
  (lambda (exp k-exp)
    (cases expression exp
      (const-exp (num)
        (make-send-to-cont k-exp (cps-const-exp num))
      )
      (var-exp (var)
        (make-send-to-cont k-exp (cps-var-exp var))
      )
      (proc-exp (vars body)
        (make-send-to-cont k-exp
          (cps-proc-exp (append vars (list 'k%00))
            (cps-of-exp body (cps-var-exp 'k%00))
          )
        )
      )
      (zero?-exp (exp1)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (make-send-to-cont k-exp (cps-zero?-exp (car simples)))
          )
        )
      )
      (null?-exp (exp1)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (make-send-to-cont k-exp (cps-null?-exp (car simples)))
          )
        )
      )
      (number?-exp (exp1)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (make-send-to-cont k-exp (cps-number?-exp (car simples)))
          )
        )
      )
      (equal?-exp (exp1 exp2)
        (cps-of-exps (list exp1 exp2)
          (lambda (simples)
            (make-send-to-cont k-exp
              (cps-equal?-exp (car simples) (cadr simples))
            )
          )
        )
      )
      (less?-exp (exp1 exp2)
        (cps-of-exps (list exp1 exp2)
          (lambda (simples)
            (make-send-to-cont k-exp
              (cps-less?-exp (car simples) (cadr simples))
            )
          )
        )
      )
      (greater?-exp (exp1 exp2)
        (cps-of-exps (list exp1 exp2)
          (lambda (simples)
            (make-send-to-cont k-exp
              (cps-greater?-exp (car simples) (cadr simples))
            )
          )
        )
      )
      (diff-exp (exp1 exp2)
        (cps-of-exps (list exp1 exp2)
          (lambda (simples)
            (make-send-to-cont k-exp
              (cps-diff-exp (car simples) (cadr simples))
            )
          )
        )
      )
      (mul-exp (exp1 exp2)
        (cps-of-exps (list exp1 exp2)
          (lambda (simples)
            (make-send-to-cont k-exp
              (cps-mul-exp (car simples) (cadr simples))
            )
          )
        )
      )
      (add1-exp (exp1)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (make-send-to-cont k-exp (cps-add1-exp (car simples)))
          )
        )
      )
      (sum-exp (exps)
        (cps-of-exps exps
          (lambda (simples)
            (make-send-to-cont k-exp (cps-sum-exp simples))
          )
        )
      )
      (if-exp (exp1 exp2 exp3)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (cps-if-exp (car simples)
              (cps-of-exp exp2 k-exp)
              (cps-of-exp exp3 k-exp)
            )
          )
        )
      )
      (let-exp (vars rhss body)
        (let f ([vs vars] [rs rhss])
          (if (null? vs)
            (cps-of-exp body k-exp)
            (cps-of-exp (car rs) (cps-proc-exp (list (car vs)) (f (cdr vs) (cdr rs))))
          )
        )
      )
      (letrec-exp (p-names b-varss p-bodies letrec-body)
        (cps-letrec-exp p-names
          (map (lambda (b-vars) (append b-vars (list 'k%00))) b-varss)
          (map (lambda (p-body) (cps-of-exp p-body (cps-var-exp 'k%00))) p-bodies)
          (cps-of-exp letrec-body k-exp)
        )
      )
      (call-exp (rator rands)
        (cps-of-exps (cons rator rands)
          (lambda (simples)
            (cps-call-exp (car simples) (append (cdr simples) (list k-exp)))
          )
        )
      )
      (emptylist-exp ()
        (make-send-to-cont k-exp (cps-emptylist-exp))
      )
      (list-exp (exps)
        (cps-of-exps exps
          (lambda (simples)
            (make-send-to-cont k-exp (cps-list-exp simples))
          )
        )
      )
      (car-exp (exp1)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (make-send-to-cont k-exp (cps-car-exp (car simples)))
          )
        )
      )
      (cdr-exp (exp1)
        (cps-of-exps (list exp1)
          (lambda (simples)
            (make-send-to-cont k-exp (cps-cdr-exp (car simples)))
          )
        )
      )
      (cons-exp (exp1 exp2)
        (cps-of-exps (list exp1 exp2)
          (lambda (simples)
            (make-send-to-cont k-exp
              (cps-cons-exp (car simples) (cadr simples))
            )
          )
        )
      )
    )
  )
)

; SimpleExp * SimpleExp -> TfExp
(define make-send-to-cont
  (lambda (k-exp simple-exp)
    (cps-call-exp k-exp (list simple-exp))
  )
)

; InpExp -> SimpleExp
(define cps-of-simple-exp
  (lambda (exp)
    (cases expression exp
      (const-exp (num) (cps-const-exp num))
      (var-exp (var) (cps-var-exp var))
      (diff-exp (exp1 exp2)
        (cps-diff-exp
          (cps-of-simple-exp exp1)
          (cps-of-simple-exp exp2)
        )
      )
      (mul-exp (exp1 exp2)
        (cps-mul-exp
          (cps-of-simple-exp exp1)
          (cps-of-simple-exp exp2)
        )
      )
      (zero?-exp (exp1)
        (cps-zero?-exp (cps-of-simple-exp exp1))
      )
      (number?-exp (exp1)
        (cps-number?-exp (cps-of-simple-exp exp1))
      )
      (equal?-exp (exp1 exp2)
        (cps-equal?-exp (cps-of-simple-exp exp1) (cps-of-simple-exp exp2))
      )
      (less?-exp (exp1 exp2)
        (cps-less?-exp (cps-of-simple-exp exp1) (cps-of-simple-exp exp2))
      )
      (greater?-exp (exp1 exp2)
        (cps-greater?-exp (cps-of-simple-exp exp1) (cps-of-simple-exp exp2))
      )
      (null?-exp (exp1)
        (cps-null?-exp (cps-of-simple-exp exp1))
      )
      (emptylist-exp ()
        (cps-emptylist-exp)
      )
      (list-exp (exps)
        (cps-list-exp (map cps-of-simple-exp exps))
      )
      (car-exp (exp1)
        (cps-car-exp (cps-of-simple-exp exp1))
      )
      (cdr-exp (exp1)
        (cps-cdr-exp (cps-of-simple-exp exp1))
      )
      (cons-exp (exp1 exp2)
        (cps-cons-exp (cps-of-simple-exp exp1) (cps-of-simple-exp exp2))
      )
      (proc-exp (vars exp1)
        (cps-proc-exp
          (append vars (list 'k%00))
          (cps-of-exp exp1 (cps-var-exp 'k%00))
        )
      )
      (add1-exp (exp1)
        (cps-sum-exp (cps-of-simple-exp exp1))
      )
      (sum-exp (exps)
        (cps-sum-exp (map cps-of-simple-exp exps))
      )
      (else (report-invalid-exp-to-cps-of-simple-exp exp))
    )
  )
)
